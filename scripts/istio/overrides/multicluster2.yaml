aspen-mesh-controlplane:
  clusterId: cluster2
  userAuth:
    type: none

aspen-mesh-secure-ingress:
  externalDnsEnabled: true
  lets-encrypt-email: dwayne@aspenmesh.io

external-dns:
  txtOwnerId: dwayne-cluster2

global:
  mtls:
    enabled: false

  meshID: mesh1
  multiCluster:
    # Set to true to connect two kubernetes clusters via their respective
    # ingressgateway services when pods in each cluster cannot directly talk
    # to one another. All clusters should be using Istio mTLS and must have a
    # shared root CA for this model to work.
    enabled: true
    # Should be set to the name of the cluster this installation will run in.
    # This is required for sidecar injection to properly label proxies.
    clusterName: "cluster2"
    globalDomainSuffix: "local"
    # Enable envoy filter to translate `globalDomainSuffix` to cluster local
    # suffix for cross cluster communication
    includeEnvoyFilter: false
  network: network2

  proxy:
    logLevel: info
    accessLogFile: "/dev/null"
  imagePullSecrets:
  - aspen-mesh-pull-secret
  - aspenmesh-istio-private-pr-pull-secret
  tracer:
    zipkin:
      # address is the Host:Port for reporting trace data in zipkin format. If
      # not specified, will default to zipkin service (port 9411) in the same
      # namespace as the other istio components.
      address: aspen-mesh-jaeger-collector.istio-system:9411
  enableEccCertificates: true

# In order to make the application service callable from any cluster, the DNS
# lookup must succeed in each cluster. This provides DNS interception for all
# workloads with a sidecar, allowing Istio to perform DNS lookup on behalf of
# the application.
meshConfig:
  defaultConfig:
    proxyMetadata:
      # Enable Istio agent to handle DNS requests for known hosts
      # Unknown hosts will automatically be resolved using upstream dns servers
      # in resolv.conf
#      ISTIO_META_DNS_CAPTURE: "true"

gateways:
  istio-ingressgateway:
#    name: istio-eastwestgateway
    labels:
#      app: istio-eastwestgateway
#      istio: eastwestgateway
      topology.istio.io/network: network2
    ports:
    # You can add custom gateway ports in user values overrides, but it must
    # include those ports since helm replaces. Note that AWS ELB will by
    # default perform health checks on the first port on this list. Setting
    # this to the health check port will ensure that health checks always work.
    # https://github.com/istio/istio/issues/12503
    - port: 15021
      targetPort: 15021
      name: status-port
      protocol: TCP
    - port: 80
      targetPort: 8080
      name: http2
      protocol: TCP
    - port: 443
      targetPort: 8443
      name: https
      protocol: TCP
    - port: 15012
      targetPort: 15012
      name: tcp-istiod
      protocol: TCP
    # This is the port where sni routing happens
    - port: 15443
      targetPort: 15443
      name: tls
      protocol: TCP
    - name: tls-webhook
      port: 15017
      targetPort: 15017
    env:
      # A gateway with this mode ensures that pilot generates an additional set
      # of clusters for internal services but without Istio mTLS, to enable
      # cross cluster routing.
      ISTIO_META_ROUTER_MODE: "sni-dnat"
      ISTIO_META_REQUESTED_NETWORK_VIEW: "network2"
    serviceAnnotations:
      service.beta.kubernetes.io/aws-load-balancer-type: nlb

citadel:
  enabled: true

jaeger:
  enabled: true
  cassandra:
    persistence:
      # This setting could cause upgrade errors if modified between deployments
      # of Aspen Mesh. If you see errors that the StatefulSet cannot be patched
      # due to updates to forbidden fields, you will have to delete the
      # "istio-cassandra" StatefulSet resource before performing an upgrade.
      size: 10Gi
  schema:
    annotations:
      helm.sh/hook: post-install,post-upgrade
      helm.sh/hook-delete-policy: before-hook-creation
      helm.sh/hook-weight: "0"

pilot:
  traceSampling: "1.0"

aspen-mesh-event-storage:
  resources:
    requests: null
    limits: null
